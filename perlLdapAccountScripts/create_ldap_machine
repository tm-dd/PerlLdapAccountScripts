#!/usr/bin/perl
#
# perl based script to create a windows machine account for SAMBA
#
# Copyright (c) 2022 tm-dd (Thomas Mueller)
#
# This code is free software. You can use, redistribute and/or
# modify it under the terms of the GNU General Public Licence
# version 2, as published by the Free Software Foundation.
# This program is distributed without any warranty.
# See the GNU General Public Licence for more details.
#


# die zentrale Konfigurationsdatei und zentrale Funktions-Datei einbinden
require '/usr/local/perlLdapAccountScripts/configs/config';                                       # die zentrale Konfigrationsdatei einbinden
require $functionFile;                                                      # die zentrale Funktions-Datei einbinden

# Ergaenzung fuer LDAP-Suche einbinden
use Net::LDAP;                                                          # unter Debian-Etch Pakete: "libconvert-asn1-perl" und "libnet-ldap-perl" unter SLES10 "perl-ldap" und "perl-Convert-ASN1"


### variables and defaults ###

    our $windowTitle='CREATE LDAP MACHINE ACCOUNT';                                     # der aktuelle Fenstertitel, falls ein Menue-bassiertes Skript im Einsatz ist
    $tmpOutputMessage="";                                                   # als Zwischenspeicher fuer Ausgaben

    if ($namendParameters{"-i"} eq 'c') { $usedGui='perl-print'; }                              # Eingabe-Modus per Kommandozeile
    if ($namendParameters{"-i"} eq 'd') { $usedGui='dialog'; }                              # Eingabe-Modus per Dialog


### AUSGABE der Doku bzw. --help ###

    if ($namendParameters{"--help"} eq 'SET')
    {
        # Ausgabe der Hilfefunktion fuer den Benutzer
        outputInfo(grepTextFile($optionsFile,'create_ldap_machine','--------------------','y','y'));
        exit;
    }


### INITIALE AUFGABEN ###

    # Start nur als root erlauben (Der Start dazu kann z.B. mittels "/bin/su -l -c '/path/skript parameter'" erzwungen werden.) ?
    if ($<!='0') { outputInfo($tmpOutputMessage."This script must run as user root.\n"); exit; }

    # lese u.a. globale UID, UIDNumbers und SambaSIDs ein (nach @listUsedGid @listUsedGidNumber @listUsedSambaSID)
    readSystemIDs();
    
    
### Erstelle Listen fuer freie nutzbare IDs
    
    if ($namendParameters{"--debug"} eq 'SET') { outputInfo($tmpOutputMessage."\nsearching for the new IDs on the LDAP server ..."); }

    # Listen erzeugen
    my @listFreeUIDNumbers;
    my @listFreeSambaUIDs;

    # SEMANTIK des AUFRUF: searchFreeIDs($numberNeededIDs,$minID,$maxID,$typOfIDs,\@listUsedIDs,\@listFreeIDs);
    searchFreeIDs(1,$firstUidNumber,$lastUidNumber,'Unix-UIDs',\@listUsedUidNumber,\@listFreeUIDNumbers);           # freie ID fuer die Unix-UID holen
    searchFreeIDs(1,$firstSambaUID,$lastSambaUID,'Samba-SIDs',\@listUsedSambaSID,\@listFreeSambaUIDs);          # freie ID fuer die Samba-SID holen


### WERTE ZUM MASCHINENNAMEN ABFRAGEN UND ERSTELLEN ###

    if ($namendParameters{"--debug"} eq 'SET') { outputInfo($tmpOutputMessage."\nInput and/or validate the machine name."); }

    outputInfo($tmpOutputMessage."PLEASE NOTE: Valid names of machine accounts need a '\$' on the end.");           # Eine Info, dass das Zeichen $ am Ende der Loginnamen nicht fehlen sollte

    if ($namendParameters{"-n"} ne '')
    {   
        $machineName=testSimpleChars($namendParameters{"-n"},'machine');                        # Maschinenname aus Parameter holen und pruefen
        $machineName=testUid($machineName);                                     # pruefe den Maschinennamen (uid) und passe es ggf. an
        if (substr($machineName,-1) ne '$') { outputAndDie("The machine name must end with a '\$' character.\n"); }     # pruefe ob der Maschinenname auch mit einem '$' endet  
        if ($machineName eq $noLoginName) { outputAndDie("Without a machine name there is nothing to do, now.\n"); }    # pruefe ob der Account IMMER NOCH noch gewuenscht ist

    }
    else {
        $machineName=inputText('name of machine (PLEASE WITH THE "$" ON THE END OF THE NAME.): ');          # Eingabe des gewuenschten Maschinennames
        $machineName=testSimpleChars($machineName,'machine');                               # pruefe den Maschinennamen (uid) und passe es ggf. an
        $machineName=testUid($machineName);                                     # pruefe den Maschinennamen (uid) und passe es ggf. an
        if (substr($machineName,-1) ne '$') { outputAndDie("The machine name must end with a '\$' character.\n"); }     # pruefe ob der Maschinenname auch mit einem '$' endet
        if ($machineName eq $noLoginName) { outputAndDie("Without a machine name there is nothing to do, now.\n"); }    # pruefe ob der Account IMMER NOCH noch gewuenscht ist
    }


### erstelle LDIF-Datei

    if ($namendParameters{"--debug"} eq 'SET') { outputInfo($tmpOutputMessage."\ncreating the LDIF file to create the machine account later ..."); }

    # LDIF-Ausgabe-Datei schreiben oeffnen
    open neueDatei, '>'.$ldifTempFilename or outputAndDie("ERROR: Could not create the file '".$ldifTempFilename."'.");

    # den Kopf der LDIF-Datei erzeugen
    print neueDatei $ldifAddHeader;

    # LDIF Eintraege schreiben
    print neueDatei "# MACHINE: ".$machineName."\n#\n";                                 # Kommentar setzen
    print neueDatei "dn: uid=".$machineName.",".$ldapMachineBase."\n";                          # die dn-Zeile (eindeutiger LDAP-Pfad zum Objekt)
    print neueDatei "cn: ".$machineName."\n";                                       # der Name (UID)
    print neueDatei "sn: ".$machineName."\n";                                       # der Nachname (UID)
    print neueDatei "uid: ".$machineName."\n";                                      # die UID (Name mit $ am Ende waere sinnvoll) des Maschinen-Accounts
    print neueDatei "displayName: machine account ".$machineName."\n";                          # der anzuzeigende Name des Maschinen-Accounts
    print neueDatei "uidNumber: @listFreeUIDNumbers[0]\n";                                  # die UNIX-UID
    print neueDatei "description: Computer-Account ".$machineName."\n";                         # optionale Beschreibung
    print neueDatei "gidNumber: ".$stdMachineGidNumber."\n";                                # die UNIX-UID
    print neueDatei "objectClass: top\n";                                           # Standardwert fuer alle Maschinen-Accounts
    print neueDatei "objectClass: posixAccount\n";                                      # Standardwert fuer alle Maschinen-Accounts -> "ist Unix-Account"
    print neueDatei "objectClass: sambaSamAccount\n";                                   # Standardwert fuer alle Maschinen-Accounts -> "ist Samba-Account"
    print neueDatei "objectClass: inetOrgPerson\n";                                     # Standardwert fuer alle Maschinen-Accounts
    print neueDatei "sambaSID: ".$sambaServerSID."-".@listFreeSambaUIDs[0]."\n";                        # Samba-SID des Maschinen-Accounts
    print neueDatei "homeDirectory: /dev/null\n";                                       # KEIN Heimatverzeichnis benutzen
    print neueDatei "loginShell: /bin/false\n";                                     # KEINE Standardshell erlauben
    print neueDatei "sambaAcctFlags: [W          ]\n";                                  # Standardwert fuer alle Maschinen-Accounts (W -> Workstation)

    # LDIF-Ausgabe-Datei schliessen
    close neueDatei;


### Daten zum LDAP hinzufuegen

    # LDAP-Daten hinzufuegen (um die Accounts anzulegen) mit einem LDAP-Admin-Passwort
    $tmpOutputMessage.="Please type the LDAP administartor password to create the machine account '".$machineName."' OR stop that with a wrong password.\n";
    runLdapAdminShellCommandWithPassword($tmpOutputMessage,"ldapadd -x -D $ldapAdminBind -h $ldapServer -W -f $ldifTempFilename",'');

    # loesche die temp. LDIF-Datei wieder
    unlink $ldifTempFilename or outputAndDie("ERROR: Could not delete the temporary LDIF file: '$ldifTempFilename' \n");


### merke die eingesetzten IDs in den Sperrlisten

    if ($rememberAndCheckOldIds eq 'y') 
    {
        system "echo '".@listFreeSambaUIDs[0]."' >> ".$fileDeniedSambaUID;                      # Samba-SIDs duerfen nicht doppelt verwendet werden. Es gibt keine Unterscheidung im Einsatz fuer Gruppen und Benutzer.
        system "echo '".@listFreeGIDNumbers[0]."' >> ".$fileDeniedGidNumbers;                       # UIDs sollen natuerlich auch nicht doppelt verwendet werden (von ganz speziellen Ausnahmen abgesehen)
    }


### NSCD-Cache bei Gruppendaten neu einlesen lassen. NOETIG, da sonst Gruppen-Konfigurationen erst nach einiger Zeit bzw. Neustart korrekt nutzbar sind.

    if ($namendParameters{"--debug"} eq 'SET') { outputInfo ("reloading the local nscd for accounts ...\n"); }
    if (-x '/usr/sbin/nscd') { system "/usr/sbin/nscd -i passwd"; }                             # auf den LDAP-Clients sollte "/usr/sbin/nscd -i passwd" auch regelm. laufen, falls man den nscd nicht entsp. konfiguriert


exit 0;
