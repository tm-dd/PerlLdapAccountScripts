#!/usr/bin/perl
#
# a perl based script to create a new password
#
# Copyright (c) 2022 tm-dd (Thomas Mueller)
#
# This code is free software. You can use, redistribute and/or
# modify it under the terms of the GNU General Public Licence
# version 2, as published by the Free Software Foundation.
# This program is distributed without any warranty.
# See the GNU General Public Licence for more details.
#

# Defaultwerte und Passwort-Variable
my $minLengthPassword=10;
my $maxLengthPassword=20;
my $pw='';

# Passwortlaenge aus dem Parameter bilden (falls ein Parameter im hier erlauten Bereich angegeben angegeben wurde)
if (($ARGV[0] > 3 )&&($ARGV[0] < $ARGV[1])) { $minLengthPassword=$ARGV[0]; $maxLengthPassword=$ARGV[1]; }
if (($ARGV[0] > 3 )&&($ARGV[1] == '')) { $minLengthPassword=$ARGV[0]; $maxLengthPassword=$minLengthPassword; }

# Liste der zu benutzenden Passwortzeichen 
my @validChars=(0 .. 9,"a" .. "z","A" .. "Z",'.',',',';',':','@','!','$','%','#','=','-','_','+','?','*');
my $lenght=(int(rand($maxLengthPassword-$minLengthPassword))+$minLengthPassword);
if ($ARGV[0]!='') { print "Lenght of the password: $lenght \n"; }

# vor dem ersten Lauf kann das PW nicht OK sein
my $pwIsValid=0;

# durchlaufe so oft bis PW OK ist
while ($pwIsValid<1)
{

    # neues PW erstelln und annehmen das es OK ist
    $pw='' ;$pw=join("",@validChars[map{rand @validChars}(1..$lenght)]);
    $pwIsValid=1;

    # Passwort pruefen nach Vorgabe ob es wirklich OK ist, falls nicht als NICHT-OK kennzeichnen
    if (!($pw =~ /[A-Z]+/)) { $pwIsValid=0; }                               # war ein GROSSER BUCHSTABE enthalten
    if (!($pw =~ /[a-z]+/)) { $pwIsValid=0; }                               # war ein kleiner Buchstabe enthalten
    if (!($pw =~ /[0-9]+/)) { $pwIsValid=0; }                               # war eine Ziffer enthalten
        if (!($pw =~ /[!@#\$%&\*\(\)\[\]\{\}_\-\+=:;<>,.?\/]+/)) { $pwIsValid=0; }              # war eines dieser Sonderzeichen enthalten
    if (length($pw)<$minLengthPassword) { $pwIsValid=0; }                           # war es mindestens so lang
    if (length($pw)>$maxLengthPassword) { $pwIsValid=0; }                           # war es nicht laenger als

}

print $pw."\n";                                                 # Passwort zurueckgeben

